<?php
/**
 * @file
 * A description of what your module does.
 */

use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\node\NodeInterface;
use Drupal\Core\Link;
use Symfony\Component\HttpFoundation\RedirectResponse;

use Drupal\Core\Entity\EntityInterface;

use Drupal\Core\Messenger\MessengerTrait;

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
//function jix_interface_node_insert(NodeInterface $node)
//{
//
//    if ($node->bundle() == 'employer') {
//        $actualLink = Link::createFromRoute(t('Post Job'), 'node.add', ['node_type' => 'job']);
//        $node->set("field_employer_post_job_link", $actualLink->getUrl()->toUriString() . "?edit[field_job_company_name]=" . $node->id());
//        $node->setNewRevision(FALSE);
//        try {
//            $node->save();
//            return new RedirectResponse("/node/add/job?edit[field_job_company_name]=" . $node->id()); //Not working
//        } catch (EntityStorageException $e) {
//            Drupal::logger('jix_interface')->error(t('Saving employer id: @id failed', ['@id' => $node->id()]));
//        }
//    }
//}

/**
 * Implements hook_theme().
 */
function jix_interface_theme($existing, $type, $theme, $path)
{
    return [
        'jix_job_published' => [
            'variables' => [
                'job' => null,
            ]
        ],
        'jix_address' => [
            'variables' => [
                'title' => t('Get in touch'),
                'address_line_1' => Drupal::config('system.site')->get('address_line_1'),
                'address_line_2' => Drupal::config('system.site')->get('address_line_2'),
                'owner' => Drupal::config('system.site')->get('owner'),
                'phone' => Drupal::config('system.site')->get('phone'),
            ]
        ],
        'jix_services' => [
            'variables' => [
                'title' => t('Our services'),
            ]
        ],
    ];
}

/**
 * Implements hook_entity_insert().
 */
function jix_interface_entity_insert(EntityInterface $entity)
{
    if ($entity->bundle() == 'job') {
        Drupal::cache('render')->deleteAll();
    }
}

/**
 * Implements hook_entity_update().
 */
function jix_interface_entity_update(EntityInterface $entity)
{
    if ($entity->bundle() == 'job' and $entity instanceof NodeInterface) {
        Drupal::cache('render')->deleteAll();
        if ($entity->isPublished() and !$entity->original->isPublished()) {
            $mail_manager = Drupal::service('plugin.manager.mail');
            $module = 'jixmailer';
            $key = 'job_published';
            $to = $entity->get('field_job_contact_email')->value;
            $reply = Drupal::config('system.site')->get('mail');
            $params['message'] = Markup::create(getEmailHtmlContent('job_published', $entity));
            $langcode = Drupal::currentUser()->getPreferredLangcode();
            $result = $mail_manager->mail($module, $key, $to, $langcode, $params, $reply, true);
            if (intval($result['result']) !== 1) {
                $message = t('There was a problem sending notification email to @email for creating job id: @id.', [
                    '@email' => $to,
                    '@id' => $entity->id(),
                ]);
                Drupal::logger('jix_interface')->error($message);
            } else {
                $message = t('An email notification has been sent to @email for creating advert id: @id.', [
                    '@email' => $to,
                    '@id' => $entity->id(),
                ]);
                Drupal::logger('jix_interface')->notice($message);
            }
        }
    }

    if ($entity->bundle() == 'employer' and $entity instanceof NodeInterface) {
        if (!$entity->isPublished()) {
            $jobsService = Drupal::service('jix_interface.jobs_storage_service');
            $jobsService->unPublishJobsByEmployer($entity);
        }
    }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jix_interface_form_system_site_information_settings_alter(&$form, FormStateInterface $form_state, $form_id)
{
    $form['site_owner'] = [
        '#type' => 'textfield',
        '#title' => t('Site owner'),
        '#default_value' => Drupal::config('system.site')->get('owner'),
    ];
    $form['site_address_line_1'] = [
        '#type' => 'textfield',
        '#title' => t('Site address line 1'),
        '#default_value' => Drupal::config('system.site')->get('address_line_1'),
    ];
    $form['site_address_line_2'] = [
        '#type' => 'textfield',
        '#title' => t('Site address line 2'),
        '#default_value' => Drupal::config('system.site')->get('address_line_2'),
    ];
    $form['site_phone'] = [
        '#type' => 'tel',
        '#title' => t('Site phone'),
        '#default_value' => Drupal::config('system.site')->get('phone'),
    ];
    $form['#submit'][] = 'jix_interface_site_information_phone_submit';
}

/**
 * @param array $form
 * @param FormStateInterface $formState
 */
function jix_interface_site_information_phone_submit(array &$form, FormStateInterface $formState)
{
    $config = Drupal::configFactory()->getEditable('system.site');
    $config
        ->set('owner', $formState->getValue('site_owner'))
        ->set('address_line_1', $formState->getValue('site_address_line_1'))
        ->set('address_line_2', $formState->getValue('site_address_line_2'))
        ->set('phone', $formState->getValue('site_phone'))
        ->save();
}

function getEmailHtmlContent($email_type, NodeInterface $entity)
{
    $template_path = '';
    $variables = [];
    $twig_service = Drupal::service('twig');
    switch ($email_type) {
        case 'job_published':
            $variables = [
                'job' => $entity
            ];
            $template_path = '/templates/emails/jix-job-published.html.twig';
            break;
    }

    return $twig_service->loadTemplate(drupal_get_path('module', 'jix_interface') . $template_path)
        ->render($variables);
}
